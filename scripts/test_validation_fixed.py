"""
Teste: Valida√ß√£o corrigida com limpeza de t√≠tulo
"""
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.modules.MetadataValidator import MetadataValidator, MetadataSource
import re

print("=" * 80)
print("üß™ TESTE: Valida√ß√£o Corrigida (YouTube vs Musicbrainz sem LRCLib)")
print("=" * 80)
print()

# Simular cen√°rio real: LRCLib n√£o encontrou, YouTube vs Musicbrainz
validator = MetadataValidator()

# Dados do YouTube (corretos)
youtube_artist = "ANAVIT√ìRIA"
youtube_title = "Trevo (Vevo Presents)"

# Dados do Musicbrainz (errados - m√∫sica diferente)
musicbrainz_data = MetadataSource(
    artist="Anavit√≥ria",
    title="Outr√≥ria",
    year=2018,
    source="musicbrainz",
    confidence=0.75,
    found=True
)

# LRCLib N√ÉO encontrou (None)
lrclib_data = None

print("üì∫ DADOS DO YOUTUBE:")
print(f"   Artista: {youtube_artist}")
print(f"   M√∫sica: {youtube_title}")
print()

print("üéµ DADOS DO MUSICBRAINZ:")
print(f"   Artista: {musicbrainz_data.artist}")
print(f"   M√∫sica: {musicbrainz_data.title}")
print()

print("üîç LRCLIB:")
print(f"   Status: N√£o encontrado")
print()

# Calcular similaridade manualmente
normalized_yt = validator.normalize_string(youtube_title)
normalized_mb = validator.normalize_string(musicbrainz_data.title)
similarity = validator.calculate_similarity(youtube_title, musicbrainz_data.title)

print(f"üìä AN√ÅLISE DE SIMILARIDADE:")
print(f"   YouTube normalizado: '{normalized_yt}'")
print(f"   Musicbrainz normalizado: '{normalized_mb}'")
print(f"   Similaridade: {similarity:.2%}")
print()

# Executar valida√ß√£o
result = validator.validate_metadata(
    youtube_artist=youtube_artist,
    youtube_title=youtube_title,
    lrclib_data=lrclib_data,
    musicbrainz_data=musicbrainz_data
)

print("=" * 80)
print("‚úÖ RESULTADO DA VALIDA√á√ÉO:")
print("=" * 80)
print(f"   Artista final: {result.artist}")
print(f"   T√≠tulo final: {result.title}")
print(f"   Fonte prim√°ria: {result.primary_source}")
print(f"   Confian√ßa: {result.confidence*100:.0f}%")
print(f"   Concord√¢ncia: {result.sources_agreement*100:.0f}%")
print()

# Verificar se escolheu corretamente
if result.primary_source == "youtube":
    print("‚úÖ PASSOU: Escolheu YouTube (correto - Musicbrainz estava errado)")
    print(f"   M√∫sica: {result.title}")
elif result.primary_source == "musicbrainz":
    print("‚ùå FALHOU: Escolheu Musicbrainz (errado - deveria ser YouTube)")
    print(f"   M√∫sica errada: {result.title}")
else:
    print(f"‚ö†Ô∏è  Resultado inesperado: {result.primary_source}")

print()
print("=" * 80)

# Teste adicional: Limpar t√≠tulo do YouTube
print()
print("üßπ TESTE ADICIONAL: Limpeza de T√≠tulo")
print("=" * 80)

clean_title = youtube_title
youtube_suffixes = [
    'official video', 'official music video', 'official audio',
    'lyric video', 'lyrics', 'vevo presents', 'live', 'acoustic',
    'remix', 'remaster', 'hd', '4k', 'explicit', 'visualizer'
]
for suffix in youtube_suffixes:
    clean_title = re.sub(rf'\s*\({suffix}\)', '', clean_title, flags=re.IGNORECASE)
    clean_title = re.sub(rf'\s*\[{suffix}\]', '', clean_title, flags=re.IGNORECASE)
clean_title = clean_title.strip()

print(f"   T√≠tulo original: '{youtube_title}'")
print(f"   T√≠tulo limpo: '{clean_title}'")
print()

if clean_title == "Trevo":
    print("‚úÖ Limpeza funcionou: 'Trevo (Vevo Presents)' ‚Üí 'Trevo'")
else:
    print(f"‚ö†Ô∏è  Limpeza n√£o funcionou completamente: '{clean_title}'")

print()
print("=" * 80)
print("üèÅ TESTE CONCLU√çDO")
print("=" * 80)
