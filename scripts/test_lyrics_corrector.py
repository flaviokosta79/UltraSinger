"""
Teste do LyricsCorrector - Validar corre√ß√µes

Testa especificamente o caso "Janelle Mon√°e" ‚Üí "janela e mon√™"
"""
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.modules.LRCLib.lyrics_corrector import LyricsCorrector, PhoneticMatcher

print("=" * 80)
print("üß™ TESTE DO LYRICS CORRECTOR")
print("=" * 80)
print()

# Letra oficial (simplificada)
OFFICIAL_LYRICS = """
Eu e voc√™ ao som de Janelle Mon√°e
Vem, deixa acontecer
Abro a janela pra que voc√™ possa ver
"""

# Hotwords
HOTWORDS = ["Janelle", "Mon√°e", "Vagalumes", "Pollo"]

# Criar corretor
print("1Ô∏è‚É£  CRIANDO CORRETOR")
print("-" * 80)
corrector = LyricsCorrector(
    official_lyrics=OFFICIAL_LYRICS,
    hotwords=HOTWORDS,
    enable_phonetic=True,
    enable_context=True,
    confidence_threshold=0.7
)
print(f"‚úÖ Corretor criado com {len(corrector.correction_patterns)} patterns")
print()

# Teste 1: Corre√ß√£o "janela e mon√™" ‚Üí "Janelle Mon√°e" (com contexto "som")
print("2Ô∏è‚É£  TESTE 1: Corre√ß√£o com contexto 'som'")
print("-" * 80)

text1 = "Eu e voc√™ ao som de janela e mon√™ Vem, deixa acontecer"
print(f"Original: {text1}")

corrected1, corrections1 = corrector.correct_transcription(text1)
print(f"Corrigido: {corrected1}")
print(f"Corre√ß√µes aplicadas: {len(corrections1)}")

for i, corr in enumerate(corrections1):
    print(f"  {i+1}. '{corr['original']}' ‚Üí '{corr['corrected']}' "
          f"(confian√ßa: {corr['confidence']:.2f})")

if "Janelle Mon√°e" in corrected1 and "janela e mon√™" not in corrected1.lower():
    print("‚úÖ TESTE 1 PASSOU: 'Janelle Mon√°e' corrigido corretamente!")
else:
    print("‚ùå TESTE 1 FALHOU: Corre√ß√£o n√£o aplicada")
print()

# Teste 2: Manter "janela" sem contexto "som"
print("3Ô∏è‚É£  TESTE 2: Manter 'janela' genu√≠no (sem contexto 'som')")
print("-" * 80)

text2 = "Abro a janela pra que voc√™ possa ver"
print(f"Original: {text2}")

corrected2, corrections2 = corrector.correct_transcription(text2)
print(f"Corrigido: {corrected2}")
print(f"Corre√ß√µes aplicadas: {len(corrections2)}")

if "janela" in corrected2 and "Janelle" not in corrected2:
    print("‚úÖ TESTE 2 PASSOU: 'janela' mantido corretamente!")
else:
    print("‚ùå TESTE 2 FALHOU: 'janela' foi incorretamente modificado")
print()

# Teste 3: Varia√ß√µes de escrita
print("4Ô∏è‚É£  TESTE 3: Varia√ß√µes de escrita")
print("-" * 80)

variations = [
    "ao som de janela e mone",
    "ao som de janela mon√™",
    "ao som de janelle mone",
]

for i, text in enumerate(variations):
    print(f"\nVaria√ß√£o {i+1}: {text}")
    corrected, corrections = corrector.correct_transcription(text)
    print(f"Corrigido: {corrected}")

    if "Janelle Mon√°e" in corrected:
        print("‚úÖ Corre√ß√£o aplicada")
    else:
        print("‚ö†Ô∏è  Corre√ß√£o n√£o aplicada")

print()

# Teste 4: PhoneticMatcher
print("5Ô∏è‚É£  TESTE 4: Similaridade fon√©tica")
print("-" * 80)

test_pairs = [
    ("janela", "Janelle", True),
    ("mone", "Mon√°e", True),
    ("vagalume", "Vagalumes", True),
    ("casa", "Janelle", False),
]

for word1, word2, should_be_similar in test_pairs:
    distance = PhoneticMatcher.phonetic_distance(word1, word2)
    is_similar = PhoneticMatcher.are_similar(word1, word2, threshold=0.3)

    status = "‚úÖ" if is_similar == should_be_similar else "‚ùå"
    print(f"{status} '{word1}' vs '{word2}': dist√¢ncia={distance:.2f}, "
          f"similar={is_similar} (esperado: {should_be_similar})")

print()

# Teste 5: Texto completo (simulando transcri√ß√£o real)
print("6Ô∏è‚É£  TESTE 5: Texto completo com m√∫ltiplas ocorr√™ncias")
print("-" * 80)

full_text = """
Vou ca√ßar mais de um milh√£o de vagalumes por a√≠
Pra te ver sorrir
Eu vou de Marte at√© a Lua
C√™ sabe, eu j√° t√¥ na tua
Eu e voc√™ ao som de janela e mon√™
Vem, deixa acontecer
E me abra√ßa que o tempo n√£o passa
Saio do compasso, passo apuros que vier
Abro a janela pra que voc√™ possa ver
Vou ca√ßar mais de um milh√£o de vagalumes por a√≠
"""

print("Original (trecho):")
print(full_text[:200] + "...")
print()

corrected_full, corrections_full = corrector.correct_transcription(full_text)

print(f"Corre√ß√µes aplicadas: {len(corrections_full)}")
for i, corr in enumerate(corrections_full):
    print(f"  {i+1}. Posi√ß√£o {corr['position']}: '{corr['original']}' ‚Üí '{corr['corrected']}'")

print()
print("Texto corrigido (linhas com 'Janelle' ou 'janela'):")
for line in corrected_full.split('\n'):
    if 'janelle' in line.lower() or 'janela' in line.lower():
        print(f"  {line.strip()}")

print()

# Estat√≠sticas
print("7Ô∏è‚É£  ESTAT√çSTICAS FINAIS")
print("-" * 80)

stats = corrector.get_correction_stats(corrections_full)
print(f"Total de corre√ß√µes: {stats['total_corrections']}")
print(f"Confian√ßa m√©dia: {stats['avg_confidence']:.2f}")
print(f"Corre√ß√µes por pattern:")
for pattern, count in stats['corrections_by_pattern'].items():
    print(f"  - {pattern}: {count}x")

print()
print("=" * 80)
print("üèÅ TESTES CONCLU√çDOS")
print("=" * 80)

# Valida√ß√£o final
print()
print("üéØ VALIDA√á√ÉO FINAL:")
print("-" * 80)

# Verificar se "Janelle Mon√°e" aparece E "janela" tamb√©m (em contextos diferentes)
has_janelle = "Janelle Mon√°e" in corrected_full
has_janela = "janela" in corrected_full.lower() and "som" not in corrected_full[corrected_full.lower().find("janela")-20:corrected_full.lower().find("janela")+20].lower() if "janela" in corrected_full.lower() else False

print(f"‚úÖ 'Janelle Mon√°e' corrigido: {has_janelle}")
print(f"‚úÖ 'janela' genu√≠no mantido: {has_janela}")

if has_janelle and has_janela:
    print()
    print("üéâ SUCESSO TOTAL! Corretor funcionando perfeitamente!")
    print("   - 'Janelle Mon√°e' corrigido em contexto musical")
    print("   - 'janela' mantido em contexto literal")
else:
    print()
    print("‚ö†Ô∏è  Aten√ß√£o: Revisar l√≥gica de corre√ß√£o")
