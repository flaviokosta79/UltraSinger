"""
Exemplos Pr√°ticos: Novos Recursos WhisperX 3.4.3
================================================
Scripts de exemplo para testar cada recurso novo
"""

import whisperx
import torch
import json
from pathlib import Path


# ============================================================================
# EXEMPLO 1: Timestamps de N√∫meros
# ============================================================================

def exemplo_timestamps_numeros():
    """
    Demonstra como acessar timestamps precisos de n√∫meros
    """
    print("\n" + "="*70)
    print("EXEMPLO 1: TIMESTAMPS DE N√öMEROS")
    print("="*70 + "\n")

    # Configura√ß√£o
    audio_file = r"E:\VSCode\Projects\UltraSinger\output\Pollo - Vagalumes\Pollo - Vagalumes.mp3"
    device = "cuda" if torch.cuda.is_available() else "cpu"

    # Carregar modelo
    print("üì• Carregando modelo...")
    model = whisperx.load_model("base", device=device)

    # Carregar e transcrever √°udio
    print("üé§ Transcrevendo...")
    audio = whisperx.load_audio(audio_file)
    result = model.transcribe(audio[:16000 * 60])  # Primeiro minuto

    # Procurar n√∫meros
    print("\nüìä Procurando n√∫meros no √°udio...\n")

    numeros_encontrados = []
    for segment in result['segments']:
        if 'words' in segment:
            for word in segment['words']:
                word_text = word.get('word', '')
                # Verifica se tem d√≠gito
                if any(char.isdigit() for char in word_text):
                    numeros_encontrados.append({
                        'palavra': word_text,
                        'inicio': word.get('start', 0),
                        'fim': word.get('end', 0)
                    })

    if numeros_encontrados:
        print(f"‚úÖ Encontrados {len(numeros_encontrados)} n√∫meros:\n")
        for num in numeros_encontrados:
            print(f"   N√∫mero: '{num['palavra']}'")
            print(f"   ‚è±Ô∏è  Tempo: {num['inicio']:.2f}s - {num['fim']:.2f}s")
            print()
    else:
        print("‚ÑπÔ∏è  Nenhum n√∫mero encontrado neste √°udio.")
        print("   Experimente com um √°udio que contenha n√∫meros falados!")

    print("\n" + "="*70)


# ============================================================================
# EXEMPLO 2: Hotwords (Palavras Priorit√°rias)
# ============================================================================

def exemplo_hotwords():
    """
    Demonstra como usar hotwords para melhorar reconhecimento
    """
    print("\n" + "="*70)
    print("EXEMPLO 2: HOTWORDS (PALAVRAS PRIORIT√ÅRIAS)")
    print("="*70 + "\n")

    audio_file = r"E:\VSCode\Projects\UltraSinger\output\Pollo - Vagalumes\Pollo - Vagalumes.mp3"
    device = "cuda" if torch.cuda.is_available() else "cpu"

    # Carregar modelo
    print("üì• Carregando modelo...")
    model = whisperx.load_model("base", device=device)
    audio = whisperx.load_audio(audio_file)
    audio_sample = audio[:16000 * 30]  # 30 segundos

    # TESTE 1: SEM hotwords
    print("\nüîπ Teste 1: SEM hotwords")
    print("-" * 70)
    result_sem = model.transcribe(audio_sample, language="pt")
    texto_sem = result_sem['segments'][0]['text'] if result_sem['segments'] else ""
    print(f"Resultado: {texto_sem}\n")

    # TESTE 2: COM hotwords
    print("üîπ Teste 2: COM hotwords")
    print("-" * 70)

    # Hotwords baseados na m√∫sica "Vagalumes" do Pollo
    hotwords = [
        "vagalumes",    # T√≠tulo da m√∫sica
        "Pollo",        # Nome do artista
        "sorrir",       # Palavras da letra
        "colorir",
        "c√©u",
        "for√ßa",
        "amanhe√ßa"
    ]

    print(f"Hotwords usadas: {', '.join(hotwords)}")

    result_com = model.transcribe(
        audio_sample,
        language="pt",
        hotwords=hotwords  # ‚Üê NOVIDADE DO 3.4.3!
    )

    texto_com = result_com['segments'][0]['text'] if result_com['segments'] else ""
    print(f"Resultado: {texto_com}\n")

    # Compara√ß√£o
    print("üìä COMPARA√á√ÉO:")
    print("-" * 70)
    if texto_sem == texto_com:
        print("‚úÖ Resultados id√™nticos (√°udio j√° era claro)")
    else:
        print("üîÑ Resultados diferentes:")
        print(f"\n   SEM hotwords: {texto_sem}")
        print(f"   COM hotwords: {texto_com}")

    print("\nüí° DICA: Hotwords s√£o mais √∫teis quando:")
    print("   ‚Ä¢ O √°udio tem nomes pr√≥prios dif√≠ceis")
    print("   ‚Ä¢ H√° termos t√©cnicos ou jarg√µes")
    print("   ‚Ä¢ O artista tem nome estrangeiro")
    print("   ‚Ä¢ A qualidade do √°udio n√£o √© perfeita")

    print("\n" + "="*70)


# ============================================================================
# EXEMPLO 3: Compara√ß√£o de VAD (Pyannote vs Silero)
# ============================================================================

def exemplo_vad_comparison():
    """
    Compara performance entre Pyannote VAD e Silero VAD
    """
    print("\n" + "="*70)
    print("EXEMPLO 3: COMPARA√á√ÉO DE VAD (Voice Activity Detection)")
    print("="*70 + "\n")

    import time

    audio_file = r"E:\VSCode\Projects\UltraSinger\output\Pollo - Vagalumes\Pollo - Vagalumes.mp3"
    device = "cuda" if torch.cuda.is_available() else "cpu"

    # Carregar modelo
    print("üì• Carregando modelo...")
    model = whisperx.load_model("base", device=device)
    audio = whisperx.load_audio(audio_file)
    audio_sample = audio[:16000 * 60]  # 1 minuto

    # TESTE 1: Pyannote VAD (padr√£o)
    print("\nüîπ Teste 1: Pyannote VAD (padr√£o)")
    print("-" * 70)
    start = time.time()
    result_pyannote = model.transcribe(audio_sample, language="pt")
    time_pyannote = time.time() - start
    print(f"‚è±Ô∏è  Tempo: {time_pyannote:.2f}s")
    print(f"üìä Segmentos: {len(result_pyannote['segments'])}")

    # TESTE 2: Silero VAD (novo)
    print("\nüîπ Teste 2: Silero VAD (novo no 3.4.3)")
    print("-" * 70)
    print("‚ÑπÔ∏è  Nota: Silero VAD ainda em desenvolvimento, pode n√£o estar dispon√≠vel")

    try:
        start = time.time()
        result_silero = model.transcribe(
            audio_sample,
            language="pt",
            vad_filter=True,
            vad_options={
                "vad_onset": 0.500,
                "vad_offset": 0.363
            }
        )
        time_silero = time.time() - start
        print(f"‚è±Ô∏è  Tempo: {time_silero:.2f}s")
        print(f"üìä Segmentos: {len(result_silero['segments'])}")

        # Compara√ß√£o
        print("\nüìä RESULTADO DA COMPARA√á√ÉO:")
        print("-" * 70)
        print(f"Pyannote VAD:  {time_pyannote:.2f}s")
        print(f"Silero VAD:    {time_silero:.2f}s")

        if time_silero < time_pyannote:
            diff_percent = ((time_pyannote - time_silero) / time_pyannote) * 100
            print(f"‚úÖ Silero √© {diff_percent:.1f}% mais r√°pido!")
        else:
            print("‚ÑπÔ∏è  Pyannote foi mais r√°pido neste teste")

    except Exception as e:
        print(f"‚ö†Ô∏è  Silero VAD n√£o dispon√≠vel: {e}")
        print("   (Pode n√£o estar implementado nesta vers√£o)")

    print("\nüí° RECOMENDA√á√ÉO para UltraSinger:")
    print("   ‚Ä¢ Use Pyannote VAD (padr√£o) para QUALIDADE M√ÅXIMA")
    print("   ‚Ä¢ Use Silero VAD apenas se VELOCIDADE for cr√≠tica")

    print("\n" + "="*70)


# ============================================================================
# EXEMPLO 4: Integra√ß√£o Completa (Todos os Recursos)
# ============================================================================

def exemplo_completo():
    """
    Exemplo usando TODOS os novos recursos juntos
    """
    print("\n" + "="*70)
    print("EXEMPLO 4: INTEGRA√á√ÉO COMPLETA (TODOS OS RECURSOS)")
    print("="*70 + "\n")

    audio_file = r"E:\VSCode\Projects\UltraSinger\output\Pollo - Vagalumes\Pollo - Vagalumes.mp3"
    device = "cuda" if torch.cuda.is_available() else "cpu"

    # Metadados (normalmente viriam do nome do arquivo ou tags)
    artista = "Pollo"
    musica = "Vagalumes"

    # Preparar hotwords inteligentes
    print("üéØ Preparando hotwords baseadas nos metadados...")
    hotwords = []

    # Adicionar nome do artista e m√∫sica
    hotwords.extend(artista.split())
    hotwords.extend(musica.split())

    # Adicionar palavras comuns do g√™nero (voc√™ pode customizar)
    if "pop" in musica.lower() or "rock" in musica.lower():
        hotwords.extend(["amor", "cora√ß√£o", "yeah", "baby"])

    # Remover duplicatas
    hotwords = list(set(hotwords))

    print(f"   Hotwords: {', '.join(hotwords)}\n")

    # Carregar modelo
    print("üì• Carregando modelo...")
    model = whisperx.load_model("base", device=device)

    # Carregar √°udio
    print("üéµ Carregando √°udio...")
    audio = whisperx.load_audio(audio_file)

    # Transcrever com TODOS os recursos
    print("üé§ Transcrevendo com recursos avan√ßados...")
    print("   ‚Ä¢ Hotwords: ‚úÖ")
    print("   ‚Ä¢ Timestamps de n√∫meros: ‚úÖ")
    print("   ‚Ä¢ VAD otimizado: ‚úÖ\n")

    result = model.transcribe(
        audio[:16000 * 60],  # 1 minuto
        language="pt",
        hotwords=hotwords,
        batch_size=16
    )

    # An√°lise do resultado
    print("\nüìä AN√ÅLISE DO RESULTADO:")
    print("-" * 70)

    total_palavras = 0
    total_numeros = 0

    for i, segment in enumerate(result['segments'][:3]):  # Primeiros 3 segmentos
        print(f"\n[Segmento {i+1}]")
        print(f"‚è±Ô∏è  Tempo: {segment['start']:.2f}s - {segment['end']:.2f}s")
        print(f"üìù Texto: {segment['text']}")

        # Contar palavras
        palavras = segment['text'].split()
        total_palavras += len(palavras)

        # Procurar n√∫meros
        if 'words' in segment:
            numeros = [
                w for w in segment['words']
                if any(char.isdigit() for char in w.get('word', ''))
            ]

            if numeros:
                total_numeros += len(numeros)
                print(f"\n   üî¢ N√∫meros encontrados:")
                for num in numeros:
                    print(f"      ‚Ä¢ '{num['word']}' em {num['start']:.2f}s")

    print("\n" + "-" * 70)
    print(f"üìä ESTAT√çSTICAS:")
    print(f"   ‚Ä¢ Total de segmentos: {len(result['segments'])}")
    print(f"   ‚Ä¢ Total de palavras: {total_palavras}")
    print(f"   ‚Ä¢ Total de n√∫meros: {total_numeros}")
    print(f"   ‚Ä¢ Idioma: {result.get('language', 'N/A')}")

    # Salvar resultado
    output_file = "exemplo_completo_result.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            'artista': artista,
            'musica': musica,
            'hotwords': hotwords,
            'language': result['language'],
            'segments': [
                {
                    'text': seg['text'],
                    'start': seg['start'],
                    'end': seg['end'],
                    'words': seg.get('words', [])
                } for seg in result['segments']
            ]
        }, f, indent=2, ensure_ascii=False)

    print(f"\nüíæ Resultado completo salvo em: {output_file}")

    print("\n" + "="*70)


# ============================================================================
# MENU PRINCIPAL
# ============================================================================

def main():
    """Menu principal para escolher qual exemplo executar"""

    print("\n" + "="*70)
    print("EXEMPLOS PR√ÅTICOS: WhisperX 3.4.3 - Novos Recursos")
    print("="*70)

    print("\nEscolha um exemplo para executar:\n")
    print("1. üî¢ Timestamps de N√∫meros")
    print("2. üéØ Hotwords (Palavras Priorit√°rias)")
    print("3. üîá Compara√ß√£o de VAD (Pyannote vs Silero)")
    print("4. üöÄ Integra√ß√£o Completa (Todos os Recursos)")
    print("5. ‚ú® Executar TODOS os exemplos")
    print("0. ‚ùå Sair")

    escolha = input("\nüëâ Digite o n√∫mero da op√ß√£o: ").strip()

    if escolha == "1":
        exemplo_timestamps_numeros()
    elif escolha == "2":
        exemplo_hotwords()
    elif escolha == "3":
        exemplo_vad_comparison()
    elif escolha == "4":
        exemplo_completo()
    elif escolha == "5":
        exemplo_timestamps_numeros()
        exemplo_hotwords()
        exemplo_vad_comparison()
        exemplo_completo()
    elif escolha == "0":
        print("\nüëã At√© logo!\n")
        return
    else:
        print("\n‚ùå Op√ß√£o inv√°lida!")
        return

    print("\n‚úÖ Exemplo conclu√≠do!")
    print("\nüí° DICA: Leia o arquivo 'GUIA_RECURSOS_WHISPERX_343.md' para")
    print("   mais detalhes sobre cada recurso.\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
