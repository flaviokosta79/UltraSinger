#!/usr/bin/env python3
"""
Teste de integra√ß√£o SpeechBrain com vers√µes est√°veis
Evita problemas de TensorFlow testando apenas funcionalidades essenciais
"""

import os
import sys
import traceback
from pathlib import Path

def test_speechbrain_import():
    """Testa importa√ß√£o b√°sica do SpeechBrain"""
    print("üîç Testando importa√ß√£o do SpeechBrain...")
    try:
        import speechbrain
        print(f"‚úÖ SpeechBrain {speechbrain.__version__} importado com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao importar SpeechBrain: {e}")
        return False

def test_config_manager_import():
    """Testa importa√ß√£o do config_manager sem TensorFlow"""
    print("\nüîç Testando importa√ß√£o do config_manager...")
    try:
        # Adiciona o diret√≥rio src ao path
        src_path = Path(__file__).parent / "src"
        if str(src_path) not in sys.path:
            sys.path.insert(0, str(src_path))
        
        # Testa apenas a importa√ß√£o da enum ProcessingMode
        from modules.SpeechBrain.config_manager import ProcessingMode
        print(f"‚úÖ ProcessingMode importado: {list(ProcessingMode)}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao importar ProcessingMode: {e}")
        traceback.print_exc()
        return False

def test_speechbrain_modules_structure():
    """Verifica se os m√≥dulos SpeechBrain est√£o no lugar correto"""
    print("\nüîç Verificando estrutura dos m√≥dulos SpeechBrain...")
    
    base_path = Path(__file__).parent / "src" / "modules" / "SpeechBrain"
    expected_files = [
        "config_manager.py",
        "models.py",
        "__init__.py"
    ]
    
    all_found = True
    for file in expected_files:
        file_path = base_path / file
        if file_path.exists():
            print(f"‚úÖ {file} encontrado")
        else:
            print(f"‚ùå {file} n√£o encontrado em {file_path}")
            all_found = False
    
    return all_found

def test_basic_torch_compatibility():
    """Testa compatibilidade b√°sica com PyTorch"""
    print("\nüîç Testando compatibilidade com PyTorch...")
    try:
        import torch
        import torchaudio
        print(f"‚úÖ PyTorch {torch.__version__} e torchaudio {torchaudio.__version__} dispon√≠veis")
        
        # Teste b√°sico de tensor
        x = torch.randn(2, 3)
        print(f"‚úÖ Tensor criado: {x.shape}")
        return True
    except Exception as e:
        print(f"‚ùå Erro com PyTorch: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("=" * 60)
    print("üöÄ TESTE DE INTEGRA√á√ÉO SPEECHBRAIN - VERS√ïES EST√ÅVEIS")
    print("=" * 60)
    
    tests = [
        ("Importa√ß√£o SpeechBrain", test_speechbrain_import),
        ("Estrutura dos M√≥dulos", test_speechbrain_modules_structure),
        ("Compatibilidade PyTorch", test_basic_torch_compatibility),
        ("Config Manager", test_config_manager_import),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro inesperado em {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{len(results)} testes passaram")
    
    if passed == len(results):
        print("üéâ Todos os testes passaram! SpeechBrain est√° pronto para uso.")
        return 0
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima.")
        return 1

if __name__ == "__main__":
    exit(main())