#!/usr/bin/env python3
"""
Teste completo do sistema de logging do UltraSinger
"""

import os
import sys
import tempfile
import time
from pathlib import Path

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from modules.logger import (
    UltraSingerLogger, 
    get_logger, 
    setup_logging,
    debug, info, warning, error, critical,
    start_operation, end_operation
)


def test_basic_logging():
    """Testar funcionalidades b√°sicas de logging"""
    print("\n=== Testando Logging B√°sico ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = os.path.join(temp_dir, "logs")
        
        # Configurar logging
        logger = setup_logging(log_level="DEBUG", log_dir=log_dir)
        
        print("1. Testando diferentes n√≠veis de log...")
        
        # Testar diferentes n√≠veis
        debug("Mensagem de debug detalhada", module="Test", context="test_basic")
        info("Informa√ß√£o importante", module="Test", user_action="testing")
        warning("Aviso sobre algo", module="Test", warning_type="test")
        error("Erro de teste", module="Test", error_code=404)
        critical("Erro cr√≠tico de teste", module="Test", severity="high")
        
        print("‚úì Logs b√°sicos enviados")
        
        # Verificar se arquivos de log foram criados
        log_files = list(Path(log_dir).glob("*.log"))
        if log_files:
            print(f"‚úì Arquivos de log criados: {len(log_files)}")
            
            # Verificar conte√∫do
            for log_file in log_files:
                if log_file.stat().st_size > 0:
                    print(f"‚úì Log file {log_file.name} tem conte√∫do ({log_file.stat().st_size} bytes)")
                else:
                    print(f"‚ö† Log file {log_file.name} est√° vazio")
        else:
            print("‚ö† Nenhum arquivo de log criado")
        
        return True


def test_performance_tracking():
    """Testar sistema de tracking de performance"""
    print("\n=== Testando Tracking de Performance ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = os.path.join(temp_dir, "logs")
        logger = setup_logging(log_dir=log_dir)
        
        print("1. Testando opera√ß√µes com timing...")
        
        # Simular opera√ß√µes com diferentes dura√ß√µes
        operations = [
            ("audio_processing", 0.5, True),
            ("transcription", 1.2, True),
            ("pitch_detection", 0.8, True),
            ("file_generation", 0.3, False),  # Simular falha
            ("cache_operation", 0.1, True)
        ]
        
        for op_name, duration, success in operations:
            start_operation(op_name, module="Performance", test_mode=True)
            time.sleep(duration)  # Simular processamento
            end_operation(op_name, module="Performance", success=success, duration_simulated=duration)
        
        print("‚úì Opera√ß√µes de performance testadas")
        
        # Gerar relat√≥rio de m√©tricas
        print("2. Gerando relat√≥rio de performance...")
        logger.log_performance_metrics()
        
        # Salvar relat√≥rio em arquivo
        report_file = os.path.join(temp_dir, "performance_report.json")
        logger.save_performance_report(report_file)
        
        if os.path.exists(report_file):
            size = os.path.getsize(report_file)
            print(f"‚úì Relat√≥rio de performance salvo: {report_file} ({size} bytes)")
        else:
            print("‚úó Falha ao salvar relat√≥rio de performance")
        
        return True


def test_error_handling():
    """Testar logging de erros e exce√ß√µes"""
    print("\n=== Testando Logging de Erros ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = os.path.join(temp_dir, "logs")
        logger = setup_logging(log_dir=log_dir)
        
        print("1. Testando logging de exce√ß√µes...")
        
        # Simular diferentes tipos de erro
        try:
            # Erro de divis√£o por zero
            result = 1 / 0
        except ZeroDivisionError as e:
            error("Erro de divis√£o por zero", module="Math", exception=e, operation="division")
        
        try:
            # Erro de arquivo n√£o encontrado
            with open("arquivo_inexistente.txt", 'r') as f:
                content = f.read()
        except FileNotFoundError as e:
            error("Arquivo n√£o encontrado", module="FileIO", exception=e, filename="arquivo_inexistente.txt")
        
        try:
            # Erro de √≠ndice
            lista = [1, 2, 3]
            item = lista[10]
        except IndexError as e:
            critical("Erro cr√≠tico de √≠ndice", module="DataProcessing", exception=e, index=10, list_size=len(lista))
        
        print("‚úì Exce√ß√µes logadas com sucesso")
        
        # Verificar se arquivo de erro foi criado
        error_files = list(Path(log_dir).glob("*errors*.log"))
        if error_files:
            print(f"‚úì Arquivo de erros criado: {error_files[0].name}")
        else:
            print("‚ö† Arquivo de erros n√£o encontrado")
        
        return True


def test_module_specific_logging():
    """Testar logging espec√≠fico por m√≥dulo"""
    print("\n=== Testando Logging por M√≥dulo ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = os.path.join(temp_dir, "logs")
        logger = setup_logging(log_dir=log_dir)
        
        print("1. Testando logs de diferentes m√≥dulos...")
        
        # Simular logs de diferentes m√≥dulos do UltraSinger
        modules_tests = [
            ("Audio.Separation", "Iniciando separa√ß√£o de √°udio", {"model": "htdemucs", "device": "cpu"}),
            ("Speech.Whisper", "Transcrevendo √°udio", {"model": "small", "language": "pt"}),
            ("Pitch.Detection", "Detectando pitch", {"algorithm": "crepe", "step_size": 10}),
            ("MIDI.Generation", "Gerando arquivo MIDI", {"segments": 150, "bpm": 120}),
            ("Sheet.Creation", "Criando partitura", {"format": "pdf", "musescore_version": 4}),
            ("UltraStar.Export", "Exportando UltraStar.txt", {"format_version": "1.1.0"}),
            ("Cache.System", "Opera√ß√£o de cache", {"cache_type": "pitch", "hit_rate": 0.85})
        ]
        
        for module, message, context in modules_tests:
            info(message, module=module, **context)
        
        print("‚úì Logs de m√≥dulos espec√≠ficos enviados")
        
        # Testar opera√ß√µes complexas
        print("2. Testando opera√ß√£o complexa com sub-opera√ß√µes...")
        
        start_operation("complete_processing", module="Core", input_file="test.mp3")
        
        # Sub-opera√ß√µes
        for sub_op in ["audio_separation", "transcription", "pitch_detection", "file_generation"]:
            start_operation(sub_op, module="Core.SubProcess", parent="complete_processing")
            time.sleep(0.1)  # Simular processamento
            end_operation(sub_op, module="Core.SubProcess", success=True)
        
        end_operation("complete_processing", module="Core", success=True, total_sub_operations=4)
        
        print("‚úì Opera√ß√£o complexa logada")
        
        return True


def test_log_levels():
    """Testar diferentes n√≠veis de log"""
    print("\n=== Testando N√≠veis de Log ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = os.path.join(temp_dir, "logs")
        
        # Testar diferentes n√≠veis
        levels = ["DEBUG", "INFO", "WARNING", "ERROR"]
        
        for level in levels:
            print(f"Testando n√≠vel: {level}")
            
            logger = setup_logging(log_level=level, log_dir=log_dir)
            
            # Enviar logs de todos os n√≠veis
            debug(f"Debug message - level {level}", module="LevelTest")
            info(f"Info message - level {level}", module="LevelTest")
            warning(f"Warning message - level {level}", module="LevelTest")
            error(f"Error message - level {level}", module="LevelTest")
            
        print("‚úì Todos os n√≠veis de log testados")
        
        return True


def main():
    """Fun√ß√£o principal de teste"""
    print("üîç TESTE COMPLETO DO SISTEMA DE LOGGING ULTRASINGER üîç")
    print("=" * 60)
    
    tests = [
        ("Logging B√°sico", test_basic_logging),
        ("Tracking de Performance", test_performance_tracking),
        ("Logging de Erros", test_error_handling),
        ("Logging por M√≥dulo", test_module_specific_logging),
        ("N√≠veis de Log", test_log_levels)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name} {'='*20}")
            result = test_func()
            if result:
                print(f"‚úÖ {test_name}: PASSOU")
                passed += 1
            else:
                print(f"‚ùå {test_name}: FALHOU")
        except Exception as e:
            print(f"‚ùå {test_name}: ERRO - {e}")
    
    print("\n" + "="*60)
    print(f"Resultado Final: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES DE LOGGING PASSARAM!")
    else:
        print(f"‚ö†Ô∏è  {total - passed} teste(s) falharam")
    
    print("="*60)
    print("‚úÖ TESTE COMPLETO FINALIZADO")
    print("Sistema de logging testado e funcionando!")


if __name__ == "__main__":
    main()