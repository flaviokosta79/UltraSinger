#!/usr/bin/env python3
"""
Teste de Compatibilidade WhisperX v3.4.3
Verifica se a nova vers√£o funciona corretamente com UltraSinger
"""

import sys
import os
import traceback
import whisperx
import torch

def test_whisperx_import():
    """Testa se o WhisperX pode ser importado corretamente"""
    try:
        print(f"‚úÖ WhisperX importado com sucesso - Vers√£o: {whisperx.__version__}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao importar WhisperX: {e}")
        return False

def test_basic_functionality():
    """Testa funcionalidades b√°sicas do WhisperX"""
    try:
        print("\nüîß Testando funcionalidades b√°sicas...")
        
        # Teste 1: Verificar se pode carregar modelo pequeno
        print("  üì¶ Carregando modelo 'tiny' para teste...")
        model = whisperx.load_model("tiny", device="cpu", compute_type="int8")
        print("  ‚úÖ Modelo carregado com sucesso")
        
        # Teste 2: Verificar se pode criar √°udio de teste
        print("  üéµ Testando carregamento de √°udio...")
        # Criar um arquivo de √°udio de teste simples (sil√™ncio)
        import numpy as np
        import soundfile as sf
        
        # Criar 1 segundo de sil√™ncio
        sample_rate = 16000
        duration = 1.0
        samples = int(sample_rate * duration)
        audio_data = np.zeros(samples, dtype=np.float32)
        
        test_audio_path = "test_audio_temp.wav"
        sf.write(test_audio_path, audio_data, sample_rate)
        
        # Carregar √°udio com WhisperX
        audio = whisperx.load_audio(test_audio_path)
        print(f"  ‚úÖ √Åudio carregado - Shape: {audio.shape}")
        
        # Teste 3: Transcri√ß√£o b√°sica
        print("  üé§ Testando transcri√ß√£o...")
        result = model.transcribe(audio, batch_size=1)
        print(f"  ‚úÖ Transcri√ß√£o realizada - Segmentos: {len(result.get('segments', []))}")
        
        # Limpeza
        os.remove(test_audio_path)
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro no teste b√°sico: {e}")
        traceback.print_exc()
        return False

def test_model_loading():
    """Testa carregamento de diferentes modelos"""
    models_to_test = ["tiny", "base", "small"]
    
    print("\nüéØ Testando carregamento de modelos...")
    
    for model_name in models_to_test:
        try:
            print(f"  üì¶ Testando modelo: {model_name}")
            model = whisperx.load_model(model_name, device="cpu", compute_type="int8")
            print(f"  ‚úÖ {model_name} carregado com sucesso")
            del model  # Liberar mem√≥ria
        except Exception as e:
            print(f"  ‚ùå Erro ao carregar {model_name}: {e}")

def test_device_compatibility():
    """Testa compatibilidade com diferentes dispositivos"""
    print("\nüíª Testando compatibilidade de dispositivos...")
    
    # Teste CPU
    try:
        print("  üñ•Ô∏è  Testando CPU...")
        model = whisperx.load_model("tiny", device="cpu", compute_type="int8")
        print("  ‚úÖ CPU compat√≠vel")
        del model
    except Exception as e:
        print(f"  ‚ùå Erro com CPU: {e}")
    
    # Teste GPU (se dispon√≠vel)
    if torch.cuda.is_available():
        try:
            print("  üéÆ Testando GPU...")
            model = whisperx.load_model("tiny", device="cuda", compute_type="float16")
            print("  ‚úÖ GPU compat√≠vel")
            del model
        except Exception as e:
            print(f"  ‚ùå Erro com GPU: {e}")
    else:
        print("  ‚ÑπÔ∏è  GPU n√£o dispon√≠vel para teste")

def test_alignment_functionality():
    """Testa funcionalidade de alinhamento"""
    print("\nüéØ Testando funcionalidade de alinhamento...")
    
    try:
        # Carregar modelo de alinhamento para ingl√™s
        model_a, metadata = whisperx.load_align_model(language_code="en", device="cpu")
        print("  ‚úÖ Modelo de alinhamento carregado")
        
        # Teste b√°sico de alinhamento (com dados fict√≠cios)
        segments = [{"start": 0.0, "end": 1.0, "text": "test"}]
        
        print("  ‚úÖ Funcionalidade de alinhamento dispon√≠vel")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro no teste de alinhamento: {e}")
        return False

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ TESTE DE COMPATIBILIDADE WHISPERX v3.4.3")
    print("=" * 60)
    
    tests_passed = 0
    total_tests = 5
    
    # Teste 1: Importa√ß√£o
    if test_whisperx_import():
        tests_passed += 1
    
    # Teste 2: Funcionalidade b√°sica
    if test_basic_functionality():
        tests_passed += 1
    
    # Teste 3: Carregamento de modelos
    test_model_loading()
    tests_passed += 1  # Sempre conta como passou se n√£o crashou
    
    # Teste 4: Compatibilidade de dispositivos
    test_device_compatibility()
    tests_passed += 1  # Sempre conta como passou se n√£o crashou
    
    # Teste 5: Funcionalidade de alinhamento
    if test_alignment_functionality():
        tests_passed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä RESULTADO FINAL: {tests_passed}/{total_tests} testes passaram")
    
    if tests_passed == total_tests:
        print("üéâ WhisperX v3.4.3 est√° totalmente compat√≠vel!")
        return True
    elif tests_passed >= 3:
        print("‚ö†Ô∏è  WhisperX v3.4.3 est√° parcialmente compat√≠vel")
        return True
    else:
        print("‚ùå WhisperX v3.4.3 apresenta problemas de compatibilidade")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)